{"ast":null,"code":"var _jsxFileName = \"/Users/hprasad.sakhareicloud.com/Desktop/ipfs/StoreIPFSHash/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { pinata } from \"./config\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(\"\");\n  const [storedHash, setStoredHash] = useState(\"\");\n  const [account, setAccount] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Replace these with your deployed contract's details\n  const contractAddress = \"0xdd165047B702b2209a4CF93d8c22662fe0840fae\";\n  const contractABI = [{\n    \"inputs\": [],\n    \"name\": \"getIPFSHash\",\n    \"outputs\": [{\n      \"internalType\": \"string\",\n      \"name\": \"\",\n      \"type\": \"string\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"string\",\n      \"name\": \"_ipfsHash\",\n      \"type\": \"string\"\n    }],\n    \"name\": \"setIPFSHash\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }];\n  const changeHandler = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleSubmission = async () => {\n    try {\n      if (!selectedFile) {\n        console.error(\"No file selected\");\n        return;\n      }\n      const response = await pinata.upload.file(selectedFile);\n      const ipfsHash = response.IpfsHash;\n      setIpfsHash(ipfsHash);\n      await storeHashOnBlockchain(ipfsHash);\n    } catch (error) {\n      console.log(\"File upload failed:\", error);\n    }\n  };\n  const storeHashOnBlockchain = async hash => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      // Create a contract instance\n      const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n      // Send the transaction to store the IPFS hash on the blockchain\n      const tx = await contract.setIPFSHash(hash);\n      await tx.wait();\n      console.log(\"IPFS hash stored on blockchain:\", hash);\n    } catch (error) {\n      console.log(\"Failed to store IPFS hash on blockchain:\", error);\n    }\n  };\n  const retrieveHashFromBlockchain = async () => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, contractABI, provider);\n\n      // Retrieve the IPFS hash from the blockchain\n      const retrievedHash = await contract.getIPFSHash();\n      setStoredHash(retrievedHash);\n      console.log(\"Retrieved IPFS hash from blockchain:\", retrievedHash);\n    } catch (error) {\n      console.log(\"Failed to retrieve IPFS hash from blockchain:\", error);\n    }\n  };\n  const connectWallet = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n        setIsConnected(true);\n      } else {\n        alert(\"Please install MetaMask!\");\n      }\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n    }\n  };\n  const disconnectWallet = () => {\n    setAccount(\"\");\n    setIsConnected(false);\n  };\n  useEffect(() => {\n    const checkWalletConnection = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          setIsConnected(true);\n        }\n      }\n    };\n    checkWalletConnection();\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', accounts => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else {\n          setAccount(accounts[0]);\n        }\n      });\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', () => {});\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-section\",\n      children: !isConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        className: \"connect-button\",\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallet-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"wallet-address\",\n          children: [account.slice(0, 6), \"...\", account.slice(-4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          className: \"disconnect-button\",\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Choose File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: changeHandler,\n        className: \"file-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmission,\n        className: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), ipfsHash && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"IPFS Hash:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), \" \", ipfsHash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"retrieve-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: retrieveHashFromBlockchain,\n        className: \"retrieve-button\",\n        children: \"Retrieve Stored Hash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), storedHash && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Stored IPFS Hash:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://gateway.pinata.cloud/ipfs/${storedHash}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"ipfs-link\",\n          children: storedHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"C41Lb6MpTRi+1hBqdBLEo7R3IDw=\");\n_c = App;\nexport default App;\n\n//https://gateway.pinata.cloud/ipfs/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","pinata","ethers","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","ipfsHash","setIpfsHash","storedHash","setStoredHash","account","setAccount","isConnected","setIsConnected","contractAddress","contractABI","changeHandler","event","target","files","handleSubmission","console","error","response","upload","file","IpfsHash","storeHashOnBlockchain","log","hash","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","tx","setIPFSHash","wait","retrieveHashFromBlockchain","retrievedHash","getIPFSHash","connectWallet","accounts","request","method","alert","disconnectWallet","checkWalletConnection","length","on","removeListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","slice","type","onChange","href","rel","_c","$RefreshReg$"],"sources":["/Users/hprasad.sakhareicloud.com/Desktop/ipfs/StoreIPFSHash/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { pinata } from \"./config\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(\"\");\n  const [storedHash, setStoredHash] = useState(\"\");\n  const [account, setAccount] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Replace these with your deployed contract's details\n  const contractAddress = \"0xdd165047B702b2209a4CF93d8c22662fe0840fae\";\n  const contractABI = [\n    {\n      \"inputs\": [],\n      \"name\": \"getIPFSHash\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"_ipfsHash\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"setIPFSHash\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ];\n\n  const changeHandler = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleSubmission = async () => {\n    try {\n      if (!selectedFile) {\n        console.error(\"No file selected\");\n        return;\n      }\n\n      const response = await pinata.upload.file(selectedFile);\n      const ipfsHash = response.IpfsHash;\n      setIpfsHash(ipfsHash);\n\n      await storeHashOnBlockchain(ipfsHash);\n    } catch (error) {\n      console.log(\"File upload failed:\", error);\n    }\n  };\n\n  const storeHashOnBlockchain = async (hash) => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      // Create a contract instance\n      const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n      // Send the transaction to store the IPFS hash on the blockchain\n      const tx = await contract.setIPFSHash(hash);\n      await tx.wait();\n\n      console.log(\"IPFS hash stored on blockchain:\", hash);\n    } catch (error) {\n      console.log(\"Failed to store IPFS hash on blockchain:\", error);\n    }\n  };\n\n  const retrieveHashFromBlockchain = async () => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, contractABI, provider);\n\n      // Retrieve the IPFS hash from the blockchain\n      const retrievedHash = await contract.getIPFSHash();\n      setStoredHash(retrievedHash);\n\n      console.log(\"Retrieved IPFS hash from blockchain:\", retrievedHash);\n    } catch (error) {\n      console.log(\"Failed to retrieve IPFS hash from blockchain:\", error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n        setIsConnected(true);\n      } else {\n        alert(\"Please install MetaMask!\");\n      }\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n    }\n  };\n\n  const disconnectWallet = () => {\n    setAccount(\"\");\n    setIsConnected(false);\n  };\n\n  useEffect(() => {\n    const checkWalletConnection = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          setIsConnected(true);\n        }\n      }\n    };\n\n    checkWalletConnection();\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else {\n          setAccount(accounts[0]);\n        }\n      });\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', () => {});\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"wallet-section\">\n        {!isConnected ? (\n          <button onClick={connectWallet} className=\"connect-button\">\n            Connect Wallet\n          </button>\n        ) : (\n          <div className=\"wallet-info\">\n            <span className=\"wallet-address\">\n              {account.slice(0, 6)}...{account.slice(-4)}\n            </span>\n            <button onClick={disconnectWallet} className=\"disconnect-button\">\n              Disconnect\n            </button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"upload-section\">\n        <label className=\"form-label\">Choose File</label>\n        <input type=\"file\" onChange={changeHandler} className=\"file-input\" />\n        <button onClick={handleSubmission} className=\"submit-button\">\n          Submit\n        </button>\n      </div>\n\n      {ipfsHash && (\n        <div className=\"result-section\">\n          <p>\n            <strong>IPFS Hash:</strong> {ipfsHash}\n          </p>\n        </div>\n      )}\n\n      <div className=\"retrieve-section\">\n        <button onClick={retrieveHashFromBlockchain} className=\"retrieve-button\">\n          Retrieve Stored Hash\n        </button>\n        {storedHash && (\n          <p>\n            <strong>Stored IPFS Hash:</strong>{\" \"}\n            <a \n              href={`https://gateway.pinata.cloud/ipfs/${storedHash}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"ipfs-link\"\n            >\n              {storedHash}\n            </a>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//https://gateway.pinata.cloud/ipfs/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}