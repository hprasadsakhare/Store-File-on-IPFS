{"ast":null,"code":"var _jsxFileName = \"/Users/hprasad.sakhareicloud.com/Desktop/ipfs/StoreIPFSHash/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { pinata } from \"./config\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(\"\");\n  const [storedHash, setStoredHash] = useState(\"\");\n\n  // Replace these with your deployed contract's details\n  const contractAddress = \"0xdd165047B702b2209a4CF93d8c22662fe0840fae\";\n  const contractABI = [{\n    \"inputs\": [],\n    \"name\": \"getIPFSHash\",\n    \"outputs\": [{\n      \"internalType\": \"string\",\n      \"name\": \"\",\n      \"type\": \"string\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"string\",\n      \"name\": \"_ipfsHash\",\n      \"type\": \"string\"\n    }],\n    \"name\": \"setIPFSHash\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }];\n  const changeHandler = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleSubmission = async () => {\n    try {\n      if (!selectedFile) {\n        console.error(\"No file selected\");\n        return;\n      }\n      const response = await pinata.upload.file(selectedFile);\n      const ipfsHash = response.IpfsHash;\n      setIpfsHash(ipfsHash);\n      await storeHashOnBlockchain(ipfsHash);\n    } catch (error) {\n      console.log(\"File upload failed:\", error);\n    }\n  };\n  const storeHashOnBlockchain = async hash => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      // Create a contract instance\n      const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n      // Send the transaction to store the IPFS hash on the blockchain\n      const tx = await contract.setIPFSHash(hash);\n      await tx.wait();\n      console.log(\"IPFS hash stored on blockchain:\", hash);\n    } catch (error) {\n      console.log(\"Failed to store IPFS hash on blockchain:\", error);\n    }\n  };\n  const retrieveHashFromBlockchain = async () => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, contractABI, provider);\n\n      // Retrieve the IPFS hash from the blockchain\n      const retrievedHash = await contract.getIPFSHash();\n      setStoredHash(retrievedHash);\n      console.log(\"Retrieved IPFS hash from blockchain:\", retrievedHash);\n    } catch (error) {\n      console.log(\"Failed to retrieve IPFS hash from blockchain:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Choose File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: changeHandler,\n        className: \"file-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmission,\n        className: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), ipfsHash && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"IPFS Hash:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), \" \", ipfsHash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"retrieve-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: retrieveHashFromBlockchain,\n        className: \"retrieve-button\",\n        children: \"Retrieve Stored Hash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), storedHash && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Stored IPFS Hash:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), \" \", storedHash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"iqOFtjuq13dhr37ZSH4oNrdlTVs=\");\n_c = App;\nexport default App;\n\n//https://gateway.pinata.cloud/ipfs/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","pinata","ethers","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","ipfsHash","setIpfsHash","storedHash","setStoredHash","contractAddress","contractABI","changeHandler","event","target","files","handleSubmission","console","error","response","upload","file","IpfsHash","storeHashOnBlockchain","log","hash","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","tx","setIPFSHash","wait","retrieveHashFromBlockchain","retrievedHash","getIPFSHash","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/hprasad.sakhareicloud.com/Desktop/ipfs/StoreIPFSHash/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { pinata } from \"./config\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(\"\");\n  const [storedHash, setStoredHash] = useState(\"\");\n\n  // Replace these with your deployed contract's details\n  const contractAddress = \"0xdd165047B702b2209a4CF93d8c22662fe0840fae\";\n  const contractABI = [\n    {\n      \"inputs\": [],\n      \"name\": \"getIPFSHash\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"_ipfsHash\",\n          \"type\": \"string\"\n        }\n      ],\n      \"name\": \"setIPFSHash\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ];\n\n  const changeHandler = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleSubmission = async () => {\n    try {\n      if (!selectedFile) {\n        console.error(\"No file selected\");\n        return;\n      }\n\n      const response = await pinata.upload.file(selectedFile);\n      const ipfsHash = response.IpfsHash;\n      setIpfsHash(ipfsHash);\n\n      await storeHashOnBlockchain(ipfsHash);\n    } catch (error) {\n      console.log(\"File upload failed:\", error);\n    }\n  };\n\n  const storeHashOnBlockchain = async (hash) => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      // Create a contract instance\n      const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n      // Send the transaction to store the IPFS hash on the blockchain\n      const tx = await contract.setIPFSHash(hash);\n      await tx.wait();\n\n      console.log(\"IPFS hash stored on blockchain:\", hash);\n    } catch (error) {\n      console.log(\"Failed to store IPFS hash on blockchain:\", error);\n    }\n  };\n\n  const retrieveHashFromBlockchain = async () => {\n    try {\n      // Connect to Ethereum provider (MetaMask)\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, contractABI, provider);\n\n      // Retrieve the IPFS hash from the blockchain\n      const retrievedHash = await contract.getIPFSHash();\n      setStoredHash(retrievedHash);\n\n      console.log(\"Retrieved IPFS hash from blockchain:\", retrievedHash);\n    } catch (error) {\n      console.log(\"Failed to retrieve IPFS hash from blockchain:\", error);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"upload-section\">\n        <label className=\"form-label\">Choose File</label>\n        <input type=\"file\" onChange={changeHandler} className=\"file-input\" />\n        <button onClick={handleSubmission} className=\"submit-button\">\n          Submit\n        </button>\n      </div>\n\n      {ipfsHash && (\n        <div className=\"result-section\">\n          <p>\n            <strong>IPFS Hash:</strong> {ipfsHash}\n          </p>\n        </div>\n      )}\n\n      <div className=\"retrieve-section\">\n        <button onClick={retrieveHashFromBlockchain} className=\"retrieve-button\">\n          Retrieve Stored Hash\n        </button>\n        {storedHash && (\n          <p>\n            <strong>Stored IPFS Hash:</strong> {storedHash}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n//https://gateway.pinata.cloud/ipfs/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}