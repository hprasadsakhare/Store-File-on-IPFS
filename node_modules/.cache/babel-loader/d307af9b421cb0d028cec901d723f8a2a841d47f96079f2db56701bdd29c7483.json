{"ast":null,"code":"import { from } from './base.js';\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n});","map":{"version":3,"names":["from","alphabet","Array","alphabetBytesToChars","reduce","p","c","i","alphabetCharsToBytes","codePointAt","encode","data","decode","str","byts","char","byt","undefined","Error","push","Uint8Array","base256emoji","prefix","name"],"sources":["/Users/hprasad.sakhareicloud.com/Desktop/ipfs/StoreIPFSHash/node_modules/multiformats/src/bases/base256emoji.ts"],"sourcesContent":["import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars: string[] = (alphabet.reduce<string[]>((p, c, i) => { p[i] = c; return p }, ([])))\nconst alphabetCharsToBytes: number[] = (alphabet.reduce<number[]>((p, c, i) => { p[c.codePointAt(0) as number] = i; return p }, ([])))\n\nfunction encode (data: Uint8Array): string {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\nfunction decode (str: string): Uint8Array {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0) as number]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAEhC,MAAMC,QAAQ,GAAGC,KAAK,CAACF,IAAI,CAAC,weAAwe,CAAC;AACrgB,MAAMG,oBAAoB,GAAcF,QAAQ,CAACG,MAAM,CAAW,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAI;EAAGF,CAAC,CAACE,CAAC,CAAC,GAAGD,CAAC;EAAE,OAAOD,CAAC;AAAC,CAAC,EAAG,EAAG,CAAE;AAC7G,MAAMG,oBAAoB,GAAcP,QAAQ,CAACG,MAAM,CAAW,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAI;EAAGF,CAAC,CAACC,CAAC,CAACG,WAAW,CAAC,CAAC,CAAW,CAAC,GAAGF,CAAC;EAAE,OAAOF,CAAC;AAAC,CAAC,EAAG,EAAG,CAAE;AAEtI,SAASK,MAAMA,CAAEC,IAAgB;EAC/B,OAAOA,IAAI,CAACP,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;IAC1BD,CAAC,IAAIF,oBAAoB,CAACG,CAAC,CAAC;IAC5B,OAAOD,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;AACR;AAEA,SAASO,MAAMA,CAAEC,GAAW;EAC1B,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,MAAMC,IAAI,IAAIF,GAAG,EAAE;IACtB,MAAMG,GAAG,GAAGR,oBAAoB,CAACO,IAAI,CAACN,WAAW,CAAC,CAAC,CAAW,CAAC;IAC/D,IAAIO,GAAG,KAAKC,SAAS,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,+BAA+BH,IAAI,EAAE,CAAC;IACxD;IACAD,IAAI,CAACK,IAAI,CAACH,GAAG,CAAC;EAChB;EACA,OAAO,IAAII,UAAU,CAACN,IAAI,CAAC;AAC7B;AAEA,OAAO,MAAMO,YAAY,GAAGrB,IAAI,CAAC;EAC/BsB,MAAM,EAAE,IAAI;EACZC,IAAI,EAAE,cAAc;EACpBb,MAAM;EACNE;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}