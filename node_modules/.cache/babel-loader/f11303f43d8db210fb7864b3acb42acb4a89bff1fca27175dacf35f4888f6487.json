{"ast":null,"code":"export const peerIdSymbol = Symbol.for('@libp2p/peer-id');\nexport function isPeerId(other) {\n  return other != null && Boolean(other[peerIdSymbol]);\n}","map":{"version":3,"names":["peerIdSymbol","Symbol","for","isPeerId","other","Boolean"],"sources":["/Users/hprasad.sakhareicloud.com/Desktop/ipfs/StoreIPFSHash/node_modules/@libp2p/interface/src/peer-id/index.ts"],"sourcesContent":["import type { KeyType } from '../keys/index.js'\nimport type { CID } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nexport type PeerIdType = KeyType | string\n\nexport interface RSAPeerId extends PeerId {\n  readonly type: 'RSA'\n  readonly publicKey?: Uint8Array\n}\n\nexport interface Ed25519PeerId extends PeerId {\n  readonly type: 'Ed25519'\n  readonly publicKey: Uint8Array\n}\n\nexport interface Secp256k1PeerId extends PeerId {\n  readonly type: 'secp256k1'\n  readonly publicKey: Uint8Array\n}\n\nexport interface URLPeerId extends PeerId {\n  readonly type: 'url'\n}\n\nexport interface PeerId {\n  type: PeerIdType\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n  publicKey?: Uint8Array\n\n  toString(): string\n  toCID(): CID\n  toBytes(): Uint8Array\n  equals(other?: PeerId | Uint8Array | string): boolean\n}\n\nexport const peerIdSymbol = Symbol.for('@libp2p/peer-id')\n\nexport function isPeerId (other: any): other is PeerId {\n  return other != null && Boolean(other[peerIdSymbol])\n}\n"],"mappings":"AAqCA,OAAO,MAAMA,YAAY,GAAGC,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC;AAEzD,OAAM,SAAUC,QAAQA,CAAEC,KAAU;EAClC,OAAOA,KAAK,IAAI,IAAI,IAAIC,OAAO,CAACD,KAAK,CAACJ,YAAY,CAAC,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}