{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/hprasad.sakhareicloud.com/Desktop/ipfs/StoreIPFSHash/node_modules/@libp2p/interface/src/topology/index.ts"],"sourcesContent":["import type { Connection } from '../connection/index.js'\nimport type { PeerId } from '../peer-id/index.js'\n\n/**\n * A topology filter\n *\n * @see https://libp2p.github.io/js-libp2p/functions/_libp2p_peer_collections.peerFilter-1.html\n */\nexport interface TopologyFilter {\n  has (peerId: PeerId): boolean\n  add (peerId: PeerId): void\n  remove (peerId: PeerId): void\n}\n\n/**\n * A topology is a network overlay that contains a subset of peers in the\n * complete network.\n *\n * It is a way to be notified when peers that support a given protocol connect\n * to or disconnect from the current node.\n */\nexport interface Topology {\n  /**\n   * An optional filter can prevent duplicate topology notifications for the\n   * same peer.\n   */\n  filter?: TopologyFilter\n\n  /**\n   * If true, invoke `onConnect` for this topology on transient (e.g. short-lived\n   * and/or data-limited) connections\n   *\n   * @default false\n   */\n  notifyOnTransient?: boolean\n\n  /**\n   * Invoked when a new connection is opened to a peer that supports the\n   * registered protocol\n   */\n  onConnect?(peerId: PeerId, conn: Connection): void\n\n  /**\n   * Invoked when the last connection to a peer that supports the registered\n   * protocol closes\n   */\n  onDisconnect?(peerId: PeerId): void\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}